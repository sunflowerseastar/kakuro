* kakuro

Translate board to the ~flags-to-be-solved~ schema.

This:

|      | :d 4 | :d 6 |
| :r 3 |      |      |
| :r 7 |      |      |

corresponds to:

#+begin_src clojure
;; [:direction x y sum distance]

(def flags-to-be-solved
  [[:d 1 0 4 2]
   [:d 2 0 6 2]
   [:r 0 1 3 2]
   [:r 0 2 7 2]])
#+end_src

Overall board data structure is:

#+begin_src clojure
[[{:type :black :x 0 :y 0}
    {:type :flag :x 1 :y 0 :flags #{{:direction :down :sum 4 :distance 2}}}
    {:type :flag :x 2 :y 0 :flags #{{:direction :down :sum 6 :distance 2}}}]
   [{:type :flag :x 0 :y 1 :flags #{{:direction :right :sum 3 :distance 2}}}
    {:type :entry :x 1 :y 1}
    {:type :entry :x 2 :y 1}]
   [{:type :flag :x 0 :y 2 :flags #{{:direction :right :sum 7 :distance 2}}}
    {:type :entry :x 1 :y 2}
    {:type :entry :x 2 :y 2}]]
#+end_src

Note that the x/y's are redundant, in the sense that they could be calculated as their respective matrix positions. It is maintained because it provides use when elements need to know their x/y values late in a composition chain, and it would require extra effort to either thread the x/y's along with all the functions or manage a lifted state.
